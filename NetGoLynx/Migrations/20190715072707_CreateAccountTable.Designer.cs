// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using NetGoLynx.Data;

namespace NetGoLynx.Migrations
{
#pragma warning disable 1591
    [DbContext(typeof(RedirectContext))]
    [Migration("20190715072707_CreateAccountTable")]
    partial class CreateAccountTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("NetGoLynx.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("AccountId");

                    b.HasIndex("Name");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("NetGoLynx.Models.Redirect", b =>
                {
                    b.Property<int>("RedirectId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Target")
                        .IsRequired();

                    b.HasKey("RedirectId");

                    b.HasIndex("AccountId");

                    b.HasIndex("Name");

                    b.ToTable("Redirects");
                });

            modelBuilder.Entity("NetGoLynx.Models.Redirect", b =>
                {
                    b.HasOne("NetGoLynx.Models.Account", "Account")
                        .WithMany("Redirects")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
#pragma warning restore 1591
}
